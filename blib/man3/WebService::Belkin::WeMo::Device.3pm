.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "WebService::Belkin::WeMo::Device 3"
.TH WebService::Belkin::WeMo::Device 3 "2014-12-07" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
WebService::Belkin::Wemo::Device \- Device class for controlling Wemo Switches
=head1 SYNOPSIS
.PP
Sample Usage:
.PP
my $wemo = WebService::Belkin::WeMo::Device\->new(ip => '192.168.2.126', db => '/tmp/belkin.db');
.PP
OR
.PP
my $wemo = WebService::Belkin::WeMo::Device\->new(name => 'Desk Lamp', db => '/tmp/belkin.db');
.PP
print "Name = " . $wemo\->getFriendlyName() . "\en";
print "On/Off = " . $wemo\->isSwitchOn() . "\en";
.PP
print "Turning off...\en";
$wemo\->off();
.PP
print "Turning on...\en";
$wemo\->on();
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Belkin WeMo Switch lets you turn electronic devices on or off from anywhere inside\*(--or outside\*(--your home. 
The WeMo Switch uses your existing home Wi-Fi network to provide wireless control of TVs, lamps, stereos, and more. 
This library allows basic control of the switches (turning on/off and getting device info) through \s-1UPNP\s0
.SH "METHODS"
.IX Header "METHODS"
.Vb 5
\&    * getFriendlyName \- Get the name of the switch
\&    * isSwitchOn \- Returns true (1) or false (0)
\&    * on \- Turn switch on
\&    * off \- Turn switch off
\&    * toggle \- Toggle switch on/off
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Eric Blue <ericblue76@gmail.com> \- http://eric\-blue.com
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2013 Eric Blue. This program is free
software; you can redistribute it and/or modify it under the same terms
as Perl itself.
